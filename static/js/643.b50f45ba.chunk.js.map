{"version":3,"file":"static/js/643.b50f45ba.chunk.js","mappings":"wOAGMA,EAAS,mCAAG,WAAOC,GAAP,gFACVC,EADU,2CACiCD,GADjC,SAEEE,IAAAA,IAAUD,GAFZ,YAEVE,EAFU,+BAIdC,QAAQC,IAAI,sBAAuBF,GAJrB,kBAKPA,EAAIG,MALG,iCAOT,GAPS,2CAAH,sDAUTC,EAAQ,mCAAG,WAAOC,GAAP,gFACTP,EADS,yCACgCO,GADhC,SAEGN,IAAAA,IAAUD,GAFb,YAETE,EAFS,+BAIbC,QAAQC,IAAI,qBAAsBF,GAJrB,kBAKNA,EAAIG,MALE,iCAOR,GAPQ,2CAAH,sDAURG,EAAQ,mCAAG,WAAOD,GAAP,gFACTP,EADS,qCAC4BO,GAD5B,SAEGN,IAAAA,IAAUD,GAFb,YAETE,EAFS,+BAIbC,QAAQC,IAAI,qBAAsBF,GAJrB,kBAKNA,EAAIG,MALE,iCAOR,GAPQ,2CAAH,uD,qOCdRI,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAH,sUACEE,EAAAA,EAAAA,IAMLA,EAAAA,EAAAA,GAKKA,EAAAA,EAAAA,IAIZC,GAAYH,EAAAA,EAAAA,IAAOI,EAAAA,EAAPJ,CAAH,0CAKA,SAASK,EAAT,GAAiC,IAAVC,EAAS,EAATA,MAElCC,EAUED,EAVFC,KACAC,EASEF,EATFE,WACAC,EAQEH,EARFG,SACAC,EAOEJ,EAPFI,YACAC,EAMEL,EANFK,QACAC,EAKEN,EALFM,YAIAC,GACEP,EAJFQ,SAIER,EAHFS,cAGET,EAFFU,cAEEV,EADFO,YAGeI,EAAAA,EAAAA,MAEjB,OACE,UAACd,EAAD,YACE,UAACJ,EAAD,YACE,SAACmB,EAAA,EAAD,CAAYC,QAAQ,KAApB,mBAA6BZ,MAC7B,SAACW,EAAA,EAAD,CAAYC,QAAQ,KAApB,mBAA6BP,MAC7B,gBAAKQ,IAAKP,EAAWQ,IAAI,GAAGC,MAAO,CAAEC,SAAU,QAASC,aAAc,cAGxE,UAACzB,EAAD,YACE,SAACmB,EAAA,EAAD,CAAYC,QAAQ,KAApB,mBAA6BR,MAC7B,SAACO,EAAA,EAAD,CAAYC,QAAQ,KAApB,+BAAyCX,MACzC,SAACU,EAAA,EAAD,CAAYC,QAAQ,KAApB,6BAAuCV,MACvC,SAACS,EAAA,EAAD,CAAYC,QAAQ,KAApB,gCAA0CT,MAC1C,UAACN,EAAA,EAAD,CAAKqB,QAAQ,OAAOC,WAAW,SAA/B,WACE,SAACR,EAAA,EAAD,CAAYC,QAAQ,KAApB,4BACA,SAAC,MAAD,QAEF,UAACf,EAAA,EAAD,CAAKqB,QAAQ,OAAO,kBAAgB,gBAAgBC,WAAW,SAA/D,WACE,SAACR,EAAA,EAAD,CAAYC,QAAQ,KAAKG,MAAO,CAAEK,MAAO,SAAzC,4BAGA,SAAC,MAAD,aC5DV,IAAMxB,GAAYH,EAAAA,EAAAA,IAAOI,EAAAA,EAAPJ,CAAH,8FAMA,SAAS4B,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOvB,EAAP,KAAcwB,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,qGAECtC,EAAAA,EAAAA,IAASmC,GAFV,QAEXvC,EAFW,SAIfsC,EAAStC,GAJM,2CAAH,qDAOhB0C,MACC,KAEI,SAAC,EAAD,UAAY5B,IAAS,SAAC,EAAD,CAAWA,MAAOA","sources":["api/poap.tsx","components/Event/EventCard.tsx","views/Event.tsx"],"sourcesContent":["// libraries\r\nimport axios from 'axios';\r\n\r\nconst getEvents = async (query: string) => {\r\n  const path = `https://api.poap.xyz/events?name=${query}`;\r\n  const res = await axios.get(path);\r\n  if (res) {\r\n    console.log('Get events service:', res);\r\n    return res.data;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst getEvent = async (id: string) => {\r\n  const path = `https://api.poap.xyz/events/id/${id}`;\r\n  const res = await axios.get(path);\r\n  if (res) {\r\n    console.log('Get event service:', res);\r\n    return res.data;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst getToken = async (id: string) => {\r\n  const path = `https://api.poap.xyz/token/${id}`;\r\n  const res = await axios.get(path);\r\n  if (res) {\r\n    console.log('Get event service:', res);\r\n    return res.data;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport { getEvent, getEvents, getToken };\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { Box, Card, Typography, Rating } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport spacing from 'theme/spacing';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AvatarPlaceholder from 'icons/AvatarPlaceholder.png';\r\nimport { AiOutlineCloseCircle, AiOutlineCheck } from 'react-icons/ai';\r\n\r\nconst StyledCard = styled(Card)`\r\n  margin-right: ${spacing.xxl}px;\r\n  background: #f7f7f8;\r\n  border: 1px solid #f0f0f1;\r\n  backdrop-filter: blur(20px);\r\n  border-radius: 16px;\r\n  display: flex;\r\n  padding: ${spacing.md}px;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  max-width: 400px;\r\n  > * {\r\n    margin-top: ${spacing.xl}px !important;\r\n  }\r\n`;\r\n\r\nconst Container = styled(Box)`\r\n  display: flex;\r\n`;\r\n\r\n// @ts-ignore\r\nexport default function NFTListCard({ event }) {\r\n  const {\r\n    name,\r\n    start_date,\r\n    end_date,\r\n    expiry_date,\r\n    country,\r\n    description,\r\n    fancy_id,\r\n    virtual_event,\r\n    private_event,\r\n    image_url,\r\n  } = event;\r\n\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Container>\r\n      <StyledCard>\r\n        <Typography variant=\"h5\">{`${name}`}</Typography>\r\n        <Typography variant=\"h6\">{`${description}`}</Typography>\r\n        <img src={image_url} alt=\"\" style={{ maxWidth: '400px', borderRadius: '12px' }} />\r\n      </StyledCard>\r\n\r\n      <StyledCard>\r\n        <Typography variant=\"h5\">{`${country}`}</Typography>\r\n        <Typography variant=\"h5\">{`Start Date: ${start_date}`}</Typography>\r\n        <Typography variant=\"h5\">{`End Date: ${end_date}`}</Typography>\r\n        <Typography variant=\"h5\">{`Expiry Date: ${expiry_date}`}</Typography>\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          <Typography variant=\"h5\">Virtual Event</Typography>\r\n          <AiOutlineCheck />\r\n        </Box>\r\n        <Box display=\"flex\" justify-content=\"space-between\" alignItems=\"center\">\r\n          <Typography variant=\"h5\" style={{ color: 'black' }}>\r\n            Private Event\r\n          </Typography>\r\n          <AiOutlineCloseCircle />\r\n        </Box>\r\n      </StyledCard>\r\n    </Container>\r\n  );\r\n}\r\n","import { Box, Typography } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { getEvent } from 'api/poap';\r\nimport styled from 'styled-components';\r\nimport EventCard from 'components/Event/EventCard';\r\n\r\nconst Container = styled(Box)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport default function Event(): JSX.Element {\r\n  const [event, setEvent] = useState(null);\r\n  const { eventId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchEvent = async () => {\r\n      // @ts-ignore\r\n      const res = await getEvent(eventId);\r\n      if (res) {\r\n        setEvent(res);\r\n      }\r\n    };\r\n    fetchEvent();\r\n  }, []);\r\n\r\n  return <Container>{event && <EventCard event={event} />}</Container>;\r\n}\r\n"],"names":["getEvents","query","path","axios","res","console","log","data","getEvent","id","getToken","StyledCard","styled","Card","spacing","Container","Box","NFTListCard","event","name","start_date","end_date","expiry_date","country","description","image_url","fancy_id","virtual_event","private_event","useNavigate","Typography","variant","src","alt","style","maxWidth","borderRadius","display","alignItems","color","Event","useState","setEvent","eventId","useParams","useEffect","fetchEvent"],"sourceRoot":""}