{"version":3,"sources":["api/poap.ts","api/event.ts","components/Event/EventCard.tsx","components/Event/EventsPoaps.tsx","views/Event.tsx"],"names":["getEvents","query","path","axios","get","res","data","getEvent","id","getEventPoaps","eventId","getToken","getTokens","address","canClaim","claimPoap","StyledCard","styled","Card","spacing","md","Container","Box","NFTListCard","event","name","start_date","end_date","expiry_date","country","description","image_url","fancy_id","virtual_event","private_event","Grid","container","item","xs","sm","lg","xl","Typography","variant","src","alt","style","maxWidth","borderRadius","display","alignItems","color","TablePaginationActions","props","theme","useTheme","count","page","rowsPerPage","onPageChange","sx","flexShrink","ml","IconButton","onClick","disabled","direction","Math","ceil","max","EventPoaps","rows","hasClaim","React","setPage","setRowsPerPage","emptyRows","length","flexDirection","marginTop","Tooltip","title","Button","window","location","replace","link","TableContainer","component","Paper","Table","TableHead","TableRow","map","th","TableCell","align","TableBody","slice","row","width","owner","substr","tokensOwned","transferCount","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","label","value","SelectProps","inputProps","native","newPage","onRowsPerPageChange","parseInt","target","ActionsComponent","xxl","Event","useState","setEvent","setHasClaim","eventPoaps","setEventPoaps","useParams","useEffect","fetchEvent","poaps","tokens","checkClaim","links"],"mappings":"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","file":"static/js/9.7dafa914.chunk.js","sourcesContent":["// libraries\nimport axios from \"axios\"\n\nconst getEvents = async (query: string) => {\n  const path = `https://api.poap.xyz/events?name=${query}`\n  const res = await axios.get(path)\n  if (res) {\n    // console.log('Get events service:', res);\n    return res.data\n  }\n  return false\n}\n\nconst getEvent = async (id: string) => {\n  const path = `https://api.poap.xyz/events/id/${id}`\n  const res = await axios.get(path)\n  if (res) {\n    // console.log('Get event service:', res);\n    return res.data\n  }\n  return false\n}\n\nconst getEventPoaps = async (eventId: string) => {\n  const path = `https://api.poap.xyz/event/${eventId}/poaps?limit=100`\n  const res = await axios.get(path)\n  if (res) {\n    // console.log('Get event service:', res);\n    return res.data\n  }\n  return false\n}\n\nconst getToken = async (id: string) => {\n  const path = `https://api.poap.xyz/token/${id}`\n  const res = await axios.get(path)\n  if (res) {\n    // console.log('Get event service:', res);\n    return res.data\n  }\n  return false\n}\n\nconst getTokens = async (address: string) => {\n  const path = `https://api.poap.xyz/actions/scan/${address}`\n  const res = await axios.get(path)\n  if (res) {\n    // console.log('Get tokens service:', res);\n    return res.data\n  }\n  return false\n}\n\nexport { getEvent, getEvents, getToken, getTokens, getEventPoaps }\n","// libraries\nimport axios from \"axios\"\n\nconst canClaim = async (eventId: string) => {\n  const path = `https://apidao.ddns.net/api/event/${eventId}/canClaim`\n  const res = await axios.get(path)\n  if (res) {\n    // console.log('Can claim service:', res);\n    return res.data\n  }\n  return false\n}\n\nconst claimPoap = async (eventId: string) => {\n  const path = `https://apidao.ddns.net/api/event/${eventId}/claim`\n  const res = await axios.get(path)\n  if (res) {\n    // console.log('Poap claim service:', res);\n    return res.data\n  }\n  return false\n}\n\nexport { canClaim, claimPoap }\n","/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { Box, Card, Typography, Grid } from \"@mui/material\"\nimport { styled } from \"@mui/material/styles\"\nimport spacing from \"theme/spacing\"\nimport { AiOutlineCloseCircle, AiOutlineCheck } from \"react-icons/ai\"\n\nconst StyledCard = styled(Card)`\n  display: flex;\n  background: #f7f7f8;\n  border: 1px solid #f0f0f1;\n  backdrop-filter: blur(20px);\n  border-radius: 16px;\n  padding: ${spacing.md}px;\n  flex-direction: column;\n`\n\nconst Container = styled(Box)`\n  display: flex;\n`\n\n// @ts-ignore\nexport default function NFTListCard({ event }) {\n  const {\n    name,\n    start_date,\n    end_date,\n    expiry_date,\n    country,\n    description,\n    fancy_id,\n    virtual_event,\n    private_event,\n    image_url,\n    id,\n  } = event\n\n  return (\n    <Container>\n      <Grid container spacing={4}>\n        <Grid key={event.id} item xs={12} sm={12} md={6} lg={6} xl={6}>\n          <StyledCard>\n            <Typography variant=\"h5\">{`${name}`}</Typography>\n            <Typography variant=\"h6\">{`${description}`}</Typography>\n            <img\n              src={image_url}\n              alt=\"\"\n              style={{ maxWidth: \"350px\", borderRadius: \"12px\" }}\n            />\n          </StyledCard>\n        </Grid>\n        <Grid key={event.fancy_id} item xs={12} sm={12} md={6} lg={6} xl={6}>\n          <StyledCard>\n            <Typography variant=\"h5\">{`${country}`}</Typography>\n            <Typography variant=\"h5\">{`Start Date: ${start_date}`}</Typography>\n            <Typography variant=\"h5\">{`End Date: ${end_date}`}</Typography>\n            <Typography variant=\"h5\">{`Expiry Date: ${expiry_date}`}</Typography>\n            <Box display=\"flex\" alignItems=\"center\">\n              <Typography variant=\"h5\">Virtual Event</Typography>\n              <AiOutlineCheck />\n            </Box>\n            <Box\n              display=\"flex\"\n              justify-content=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Typography variant=\"h5\" style={{ color: \"black\" }}>\n                Private Event\n              </Typography>\n              <AiOutlineCloseCircle />\n            </Box>\n          </StyledCard>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n}\n","import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useTheme } from \"@mui/material/styles\"\nimport Box from \"@mui/material/Box\"\nimport Table from \"@mui/material/Table\"\nimport TableBody from \"@mui/material/TableBody\"\nimport TableCell from \"@mui/material/TableCell\"\nimport TableContainer from \"@mui/material/TableContainer\"\nimport TableFooter from \"@mui/material/TableFooter\"\nimport TablePagination from \"@mui/material/TablePagination\"\nimport TableRow from \"@mui/material/TableRow\"\nimport Paper from \"@mui/material/Paper\"\nimport IconButton from \"@mui/material/IconButton\"\nimport FirstPageIcon from \"@mui/icons-material/FirstPage\"\nimport KeyboardArrowLeft from \"@mui/icons-material/KeyboardArrowLeft\"\nimport KeyboardArrowRight from \"@mui/icons-material/KeyboardArrowRight\"\nimport LastPageIcon from \"@mui/icons-material/LastPage\"\nimport { TableHead, Typography, Tooltip, Button } from \"@mui/material\"\nimport spacing from \"theme/spacing\"\nimport { claimPoap } from \"api/event\"\n\n// @ts-ignore\nfunction TablePaginationActions(props) {\n  const theme = useTheme()\n  const { count, page, rowsPerPage, onPageChange } = props\n\n  // @ts-ignore\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0)\n  }\n\n  // @ts-ignore\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1)\n  }\n\n  // @ts-ignore\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1)\n  }\n\n  // @ts-ignore\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\n  }\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  )\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n}\n\ninterface Props {\n  rows: any\n  hasClaim: any\n  eventId: any\n}\n\nexport default function EventPoaps({ rows, hasClaim, eventId }: Props) {\n  const [page, setPage] = React.useState(0)\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0\n\n  // @ts-ignore\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  // @ts-ignore\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const tableHeaders = [\"POAP ID\", \"OWNER\", \"TOKENS OWNED\", \"TRANSFERS\"]\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      style={{ marginTop: `${spacing.lg}px` }}\n    >\n      <Typography variant=\"h6\">POAPs distribution</Typography>\n\n      {hasClaim && (\n        <>\n          <Typography variant=\"h6\">Claim here!</Typography>\n          <Tooltip title=\"Connect\">\n            <Button\n              variant=\"contained\"\n              onClick={async () => {\n                const res = await claimPoap(eventId)\n                if (res) {\n                  window.location.replace(res.link)\n                }\n              }}\n            >\n              <Typography variant=\"body2\">Claim</Typography>\n            </Button>\n          </Tooltip>\n        </>\n      )}\n\n      {!hasClaim && (\n        <Typography variant=\"h6\">No Poaps available to claim.</Typography>\n      )}\n\n      {rows && (\n        <TableContainer\n          component={Paper}\n          style={{ marginTop: `${spacing.lg}px` }}\n        >\n          <Table>\n            <TableHead>\n              <TableRow>\n                {tableHeaders.map((th) => (\n                  <TableCell align=\"center\">{th}</TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {(rowsPerPage > 0\n                ? rows.slice(\n                    page * rowsPerPage,\n                    page * rowsPerPage + rowsPerPage\n                  )\n                : rows\n              )\n                // @ts-ignore\n                .map((row) => (\n                  <TableRow key={row.id}>\n                    <TableCell style={{ width: 160 }} align=\"center\">\n                      {row.id}\n                    </TableCell>\n                    <TableCell style={{ width: 160 }} align=\"center\">\n                      {`${row.owner.id.substr(0, 4)} ... ${row.owner.id.substr(\n                        row.owner.id.length - 4,\n                        row.owner.id.length\n                      )}`}\n                    </TableCell>\n                    <TableCell style={{ width: 160 }} align=\"center\">\n                      {row.owner.tokensOwned}\n                    </TableCell>\n                    <TableCell style={{ width: 160 }} align=\"center\">\n                      {row.transferCount}\n                    </TableCell>\n                  </TableRow>\n                ))}\n\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: -1 }]}\n                  colSpan={3}\n                  count={rows.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  SelectProps={{\n                    inputProps: {\n                      \"aria-label\": \"rows per page\",\n                    },\n                    native: true,\n                  }}\n                  onPageChange={handleChangePage}\n                  onRowsPerPageChange={handleChangeRowsPerPage}\n                  ActionsComponent={TablePaginationActions}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  )\n}\n","import { Box } from \"@mui/material\"\nimport { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router\"\nimport { getEvent, getEventPoaps } from \"api/poap\"\nimport { canClaim } from \"api/event\"\nimport styled from \"styled-components\"\nimport EventCard from \"components/Event/EventCard\"\nimport spacing from \"theme/spacing\"\nimport EventPoaps from \"components/Event/EventsPoaps\"\n\nconst Container = styled(Box)`\n  min-height: calc(100vh - 168px);\n  display: flex;\n  margin-right: ${spacing.xxl}px;\n  margin-left: ${spacing.xxl}px;\n  margin-top: ${spacing.xxl}px;\n  margin-bottom: ${spacing.lg}px;\n`\n\nexport default function Event(): JSX.Element {\n  const [event, setEvent] = useState(null)\n  const [hasClaim, setHasClaim] = useState(false)\n  const [eventPoaps, setEventPoaps] = useState([])\n  const { eventId } = useParams()\n\n  useEffect(() => {\n    const fetchEvent = async () => {\n      // @ts-ignore\n      const res = await getEvent(eventId)\n      if (res) {\n        setEvent(res)\n        // console.log('res id ', res);\n        const poaps = await getEventPoaps(res.id)\n        // console.log('Event poaps', poaps);\n        setEventPoaps(poaps.tokens)\n      }\n    }\n    const checkClaim = async () => {\n      // @ts-ignore\n      const res = await canClaim(eventId)\n      if (res) setHasClaim(res.links)\n    }\n    checkClaim()\n    fetchEvent()\n  }, [])\n\n  return (\n    <Container>\n      {event && (\n        <Box display=\"flex\" flexDirection=\"column\" width=\"100%\">\n          <EventCard event={event} />\n          {/* @ts-ignore */}\n          <EventPoaps rows={eventPoaps} hasClaim={hasClaim} eventId={eventId} />\n        </Box>\n      )}\n    </Container>\n  )\n}\n"],"sourceRoot":""}