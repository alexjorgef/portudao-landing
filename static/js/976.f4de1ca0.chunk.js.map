{"version":3,"file":"static/js/976.f4de1ca0.chunk.js","mappings":"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","sources":["api/poap.ts","api/event.ts","components/Event/EventCard.tsx","components/Event/EventsPoaps.tsx","views/Event.tsx"],"sourcesContent":["// libraries\nimport axios from 'axios';\n\nconst getEvents = async (query: string) => {\n  const path = `https://api.poap.xyz/events?name=${query}`;\n  const res = await axios.get(path);\n  if (res) {\n    console.log('Get events service:', res);\n    return res.data;\n  }\n  return false;\n};\n\nconst getEvent = async (id: string) => {\n  const path = `https://api.poap.xyz/events/id/${id}`;\n  const res = await axios.get(path);\n  if (res) {\n    console.log('Get event service:', res);\n    return res.data;\n  }\n  return false;\n};\n\nconst getEventPoaps = async (eventId: string) => {\n  const path = `https://api.poap.xyz/event/${eventId}/poaps?limit=100`;\n  const res = await axios.get(path);\n  if (res) {\n    console.log('Get event service:', res);\n    return res.data;\n  }\n  return false;\n};\n\nconst getToken = async (id: string) => {\n  const path = `https://api.poap.xyz/token/${id}`;\n  const res = await axios.get(path);\n  if (res) {\n    console.log('Get event service:', res);\n    return res.data;\n  }\n  return false;\n};\n\nconst getTokens = async (address: string) => {\n  const path = `https://api.poap.xyz/actions/scan/${address}`;\n  const res = await axios.get(path);\n  if (res) {\n    console.log('Get tokens service:', res);\n    return res.data;\n  }\n  return false;\n};\n\nexport { getEvent, getEvents, getToken, getTokens, getEventPoaps };\n","// libraries\nimport axios from 'axios';\n\nconst canClaim = async (eventId: string) => {\n  const path = `http://apiportudao.ddns.net:8080/api/event/${eventId}/canClaim`;\n  const res = await axios.get(path);\n  if (res) {\n    console.log('Can  claim service:', res);\n    return res.data;\n  }\n  return false;\n};\n\nexport default canClaim;\n","/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { Box, Card, Typography, Rating, Grid } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport spacing from 'theme/spacing';\nimport { useNavigate } from 'react-router-dom';\nimport AvatarPlaceholder from 'icons/AvatarPlaceholder.png';\nimport { AiOutlineCloseCircle, AiOutlineCheck } from 'react-icons/ai';\n\nconst StyledCard = styled(Card)`\n  display: flex;\n  background: #f7f7f8;\n  border: 1px solid #f0f0f1;\n  backdrop-filter: blur(20px);\n  border-radius: 16px;\n  padding: ${spacing.md}px;\n  flex-direction: column;\n`;\n\nconst Container = styled(Box)`\n  display: flex;\n`;\n\n// @ts-ignore\nexport default function NFTListCard({ event }) {\n  const {\n    name,\n    start_date,\n    end_date,\n    expiry_date,\n    country,\n    description,\n    fancy_id,\n    virtual_event,\n    private_event,\n    image_url,\n    id,\n  } = event;\n\n  return (\n    <Container>\n      <Grid container spacing={4}>\n        <Grid key={event.id} item xs={12} sm={12} md={6} lg={6} xl={6}>\n          <StyledCard>\n            <Typography variant=\"h5\">{`${name}`}</Typography>\n            <Typography variant=\"h6\">{`${description}`}</Typography>\n            <img src={image_url} alt=\"\" style={{ maxWidth: '350px', borderRadius: '12px' }} />\n          </StyledCard>\n        </Grid>\n        <Grid key={event.fancy_id} item xs={12} sm={12} md={6} lg={6} xl={6}>\n          <StyledCard>\n            <Typography variant=\"h5\">{`${country}`}</Typography>\n            <Typography variant=\"h5\">{`Start Date: ${start_date}`}</Typography>\n            <Typography variant=\"h5\">{`End Date: ${end_date}`}</Typography>\n            <Typography variant=\"h5\">{`Expiry Date: ${expiry_date}`}</Typography>\n            <Box display=\"flex\" alignItems=\"center\">\n              <Typography variant=\"h5\">Virtual Event</Typography>\n              <AiOutlineCheck />\n            </Box>\n            <Box display=\"flex\" justify-content=\"space-between\" alignItems=\"center\">\n              <Typography variant=\"h5\" style={{ color: 'black' }}>\n                Private Event\n              </Typography>\n              <AiOutlineCloseCircle />\n            </Box>\n          </StyledCard>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableFooter from '@mui/material/TableFooter';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport IconButton from '@mui/material/IconButton';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\nimport { Grid, TableHead, Typography } from '@mui/material';\nimport spacing from 'theme/spacing';\n\n// @ts-ignore\nfunction TablePaginationActions(props) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  // @ts-ignore\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  // @ts-ignore\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  // @ts-ignore\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  // @ts-ignore\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\ninterface Props {\n  rows: any;\n  hasClaim: any;\n}\n\nexport default function EventPoaps({ rows, hasClaim }: Props) {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  // @ts-ignore\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  // @ts-ignore\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const tableHeaders = ['POAP ID', 'OWNER', 'TOKENS OWNED', 'TRANSFERS'];\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" style={{ marginTop: `${spacing.lg}px` }}>\n      <Typography variant=\"h6\">POAPs distribution</Typography>\n\n      {hasClaim && <Typography variant=\"h6\">Claim here!</Typography>}\n      {!hasClaim && <Typography variant=\"h6\">No Poaps available to claim.</Typography>}\n\n      {rows && (\n        <TableContainer component={Paper} style={{ marginTop: `${spacing.lg}px` }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {tableHeaders.map((th) => (\n                  <TableCell align=\"center\">{th}</TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {(rowsPerPage > 0\n                ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                : rows\n              )\n                // @ts-ignore\n                .map((row) => (\n                  <TableRow key={row.id}>\n                    <TableCell style={{ width: 160 }} align=\"center\">\n                      {row.id}\n                    </TableCell>\n                    <TableCell style={{ width: 160 }} align=\"center\">\n                      {`${row.owner.id.substr(0, 4)} ... ${row.owner.id.substr(\n                        row.owner.id.length - 4,\n                        row.owner.id.length\n                      )}`}\n                    </TableCell>\n                    <TableCell style={{ width: 160 }} align=\"center\">\n                      {row.owner.tokensOwned}\n                    </TableCell>\n                    <TableCell style={{ width: 160 }} align=\"center\">\n                      {row.transferCount}\n                    </TableCell>\n                  </TableRow>\n                ))}\n\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                  colSpan={3}\n                  count={rows.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  SelectProps={{\n                    inputProps: {\n                      'aria-label': 'rows per page',\n                    },\n                    native: true,\n                  }}\n                  onPageChange={handleChangePage}\n                  onRowsPerPageChange={handleChangeRowsPerPage}\n                  ActionsComponent={TablePaginationActions}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  );\n}\n","import { Box, Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { getEvent, getEventPoaps } from 'api/poap';\nimport canClaim from 'api/event';\nimport styled from 'styled-components';\nimport EventCard from 'components/Event/EventCard';\nimport spacing from 'theme/spacing';\nimport EventPoaps from 'components/Event/EventsPoaps';\n\nconst Container = styled(Box)`\n  min-height: calc(100vh - 168px);\n  display: flex;\n  margin-right: ${spacing.xxl}px;\n  margin-left: ${spacing.xxl}px;\n  margin-top: ${spacing.xxl}px;\n  margin-bottom: ${spacing.lg}px;\n`;\n\nexport default function Event(): JSX.Element {\n  const [event, setEvent] = useState(null);\n  const [hasClaim, setHasClaim] = useState(false);\n  const [eventPoaps, setEventPoaps] = useState([]);\n  const { eventId } = useParams();\n\n  useEffect(() => {\n    const fetchEvent = async () => {\n      // @ts-ignore\n      const res = await getEvent(eventId);\n      if (res) {\n        setEvent(res);\n        console.log('res id ', res);\n        const poaps = await getEventPoaps(res.id);\n        console.log('Event poaps', poaps);\n        setEventPoaps(poaps.tokens);\n      }\n    };\n    const checkClaim = async () => {\n      // @ts-ignore\n      const res = await canClaim(eventId);\n      if (res) setHasClaim(res.links);\n    };\n    checkClaim();\n    fetchEvent();\n  }, []);\n\n  return (\n    <Container>\n      {event && (\n        <Box display=\"flex\" flexDirection=\"column\" width=\"100%\">\n          <EventCard event={event} />\n          {/* @ts-ignore */}\n          <EventPoaps rows={eventPoaps} hasClaim={hasClaim} />\n        </Box>\n      )}\n    </Container>\n  );\n}\n"],"names":["getEvents","query","path","axios","res","console","log","data","getEvent","id","getEventPoaps","eventId","getToken","getTokens","address","canClaim","StyledCard","styled","Card","spacing","Container","Box","NFTListCard","event","name","start_date","end_date","expiry_date","country","description","image_url","fancy_id","virtual_event","private_event","Grid","container","item","xs","sm","md","lg","xl","Typography","variant","src","alt","style","maxWidth","borderRadius","display","alignItems","color","TablePaginationActions","props","theme","useTheme","count","page","rowsPerPage","onPageChange","sx","flexShrink","ml","IconButton","onClick","disabled","direction","LastPage","FirstPage","KeyboardArrowRight","KeyboardArrowLeft","Math","ceil","max","EventPoaps","rows","hasClaim","React","setPage","setRowsPerPage","emptyRows","length","flexDirection","marginTop","TableContainer","component","Paper","Table","TableHead","TableRow","map","th","TableCell","align","TableBody","slice","row","width","owner","substr","tokensOwned","transferCount","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","label","value","SelectProps","inputProps","native","newPage","onRowsPerPageChange","parseInt","target","ActionsComponent","Event","useState","setEvent","setHasClaim","eventPoaps","setEventPoaps","useParams","useEffect","fetchEvent","poaps","tokens","checkClaim","links"],"sourceRoot":""}